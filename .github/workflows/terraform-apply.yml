name: On Roster Upload - Deploy Environment

on:
  workflow_dispatch:  # Enables manual trigger from the UI
  repository_dispatch:
      types: [
        terraform-full-deploy
      ]

env:
  TF_VAR_bucket_id: ${{ vars.PRIMARY_BUCKET_ID }}
  TF_VAR_github_repo: ${{ vars.THIS_REPO }}
  TF_VAR_github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  TF_VAR_target_workflow: "terraform-full-deploy"
  TF_VAR_new_account_name: ${{ vars.NEW_ACCOUNT_NAME }}
  TF_VAR_new_account_owner_email: ${{ vars.NEW_ACCOUNT_OWNER_EMAIL }}
  TF_VAR_admins_json: ${{ vars.ADMINS_JSON }}
  TERRAFORM_AWS_ROLE_TO_ASSUME: ${{ secrets.TERRAFORM_DEVOPS_AWS_ROLE_ARN }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  JSON_DESTINATION_PREFIX: environment/aws/management/data-uploads/roster/json/students


jobs:
  check-terraform-changes:
    name: Check for Terraform Changes
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    outputs:
      terraform_changed: ${{ steps.check.outputs.terraform_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 3  # Fetch the last three commits

      - name: Determine if Terraform files have changed
        id: check
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Workflow manually triggered. Assuming changes in Terraform files."
            echo "terraform_changed=true" >> $GITHUB_ENV
            echo "::set-output name=terraform_changed::true"
          elif [ -z "${{ github.event.before }}" ]; then
            echo "No previous commit found. Assuming changes in Terraform files."
            echo "terraform_changed=true" >> $GITHUB_ENV
            echo "::set-output name=terraform_changed::true"
          else
            if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E 'terraform/.*'; then
              echo "Terraform files appear to have changed"
              echo "terraform_changed=true" >> $GITHUB_ENV
              echo "::set-output name=terraform_changed::true"
            else
              echo "There apepar to be no changes to the Terraform files"
              echo "terraform_changed=false" >> $GITHUB_ENV
              echo "::set-output name=terraform_changed::false"
            fi
          fi

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    permissions:
      id-token: write  # Required to exchange the GitHub token for AWS credentials
      contents: read   # Standard permission to read the repository
    needs: [check-terraform-changes]
    if: needs.check-terraform-changes.outputs.terraform_changed == 'true'
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.TERRAFORM_AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Download the JSON student data from S3 Bucket
        run: aws s3 cp s3://${{ env.TF_VAR_bucket_id }}/${{ env.JSON_DESTINATION_PREFIX }}/students.json students.json
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}

      - name: Set TF_VAR_students_json
        run: echo "TF_VAR_students_json=$(jq -c . students.json)" >> $GITHUB_ENV
        

      # Step 2: Setup Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.1  # Adjust this to your Terraform version

      # Step 3: Initialize Terraform
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -reconfigure -backend-config=./envs/${{ github.ref_name }}.hcl

      # Step 4: Run Terraform Plan
      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan

      # Step 5: Upload the plan file as an artifact
      - name: Upload Plan File
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: ./terraform/tfplan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    permissions:
      id-token: write  # Required to exchange the GitHub token for AWS credentials
      contents: read   # Standard permission to read the repository
    needs: [terraform-plan, check-terraform-changes]  # Only run this job if 'terraform-plan' completes successfully
    if: success()

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.TERRAFORM_AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Download the JSON student data from S3 Bucket
        run: aws s3 cp s3://${{ env.TF_VAR_bucket_id }}/${{ env.JSON_DESTINATION_PREFIX }}/students.json students.json
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}

      - name: Set TF_VAR_students_json
        run: echo "TF_VAR_students_json=$(jq -c . students.json)" >> $GITHUB_ENV

      # Step 2: Setup Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.1 # Adjust this to your Terraform version

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -reconfigure

      # Step 3: Download the plan artifact
      - name: Download Plan Artifact
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan
          path: ./terraform

      # Step 4: Run Terraform Apply (auto-approved)
      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan
